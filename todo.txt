# ===== بهبودهای کارایی =====

# ===== Backtesting Engine =====

def performance_metrics(trades_history):
    """محاسبه معیارهای عملکرد"""
    if not trades_history:
        return None
    
    returns = [trade['return_pct'] for trade in trades_history]
    
    win_rate = len([r for r in returns if r > 0]) / len(returns)
    avg_win = np.mean([r for r in returns if r > 0]) if any(r > 0 for r in returns) else 0
    avg_loss = np.mean([r for r in returns if r < 0]) if any(r < 0 for r in returns) else 0
    
    profit_factor = abs(sum([r for r in returns if r > 0]) / sum([r for r in returns if r < 0])) if any(r < 0 for r in returns) else float('inf')
    
    max_drawdown = calculate_max_drawdown(returns)
    sharpe_ratio = np.mean(returns) / np.std(returns) if np.std(returns) != 0 else 0
    
    return {
        'win_rate': win_rate,
        'avg_win': avg_win,
        'avg_loss': avg_loss,
        'profit_factor': profit_factor,
        'max_drawdown': max_drawdown,
        'sharpe_ratio': sharpe_ratio,
        'total_trades': len(trades_history)
    }

def calculate_max_drawdown(returns):
    """محاسبه حداکثر افت"""
    cumulative = np.cumprod(1 + np.array(returns))
    running_max = np.maximum.accumulate(cumulative)
    drawdown = (cumulative - running_max) / running_max
    return abs(min(drawdown))

# ===== Real-time Monitoring =====

def real_time_risk_monitor(current_positions, market_data):
    """نظارت لحظه‌ای بر ریسک"""
    alerts = []
    
    for position in current_positions:
        # بررسی حد ضرر
        if position['type'] == 'long':
            current_loss = (position['entry_price'] - market_data['price']) / position['entry_price']
            if current_loss > 0.05:  # 5% ضرر
                alerts.append(f"Position {position['symbol']} approaching stop loss")
        
        # بررسی نوسانات غیرطبیعی
        if market_data.get('volatility', 0) > 0.1:  # 10% نوسان
            alerts.append(f"High volatility detected in {position['symbol']}")
    
    return alerts

# ===== Memory Management =====

def optimize_dataframe_memory(df):
    """بهینه‌سازی حافظه DataFrame"""
    for col in df.columns:
        if df[col].dtype == 'float64':
            df[col] = df[col].astype('float32')
        elif df[col].dtype == 'int64':
            df[col] = df[col].astype('int32')
    return df

# ===== Configuration =====

CONFIG = {
    'risk_management': {
        'max_position_size': 0.1,  # 10% سرمایه
        'max_portfolio_risk': 0.15,  # 15% کل پرتفولیو
        'stop_loss_atr_multiplier': 2.0,
        'min_risk_reward_ratio': 1.5
    },
    'signal_filters': {
        'min_volume_ratio': 1.2,
        'min_trend_strength': 0.1,
        'require_multi_timeframe': True
    },
    'performance': {
        'use_caching': True,
        'optimize_memory': True,
        'max_cache_size': 128
    }
}